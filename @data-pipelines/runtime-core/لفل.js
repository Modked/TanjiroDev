import { createCanvas, loadImage } from 'canvas'
import { canLevelUp, xpRange } from '../lib/levelling.js'
import { levelup } from '../lib/canvas.js' 

let handler = async (m, { conn }) => {
    let user = global.db.data.users[m.sender]
    let level = user.level

    let roles = [
        { level: 1, role: 'ŸÜŸäŸÜÿ¨ÿß ŸÖÿ®ÿ™ÿØÿ¶ ŸÖŸÜ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üå±' },
        { level: 2, role: 'ÿπÿ∂Ÿà ŸÅŸä ÿπÿ¥Ÿäÿ±ÿ© ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•'},
        { level: 3, role: 'ŸÖŸÇÿßÿ™ŸÑ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üí•' },
        { level: 4, role: 'ÿ¥ŸäŸÜŸàÿ®Ÿä ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑŸÖÿÆÿ∂ÿ±ŸÖ üî™' },
        { level: 5, role: 'ŸÖÿ≥ÿßÿπÿØ ÿ≥ÿßÿ≥ŸÉŸä üé©' },
        { level: 6, role: 'ÿßŸÑŸàÿ±Ÿäÿ´ ÿßŸÑŸÇÿßÿØŸÖ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ‚ö°' },
        { level: 7, role: 'ÿ≥Ÿàÿ≥ÿßŸÜŸà ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ü¶ã' },
        { level: 8, role: 'ÿ™ŸÑŸÖŸäÿ∞ ÿ≥ÿßÿ≥ŸÉŸä üåë' },
        { level: 9, role: 'ÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿ≥ÿßÿ≥ŸÉŸä ŸÜŸÅÿ≥Ÿá üñ§' },
        { level: 10, role: 'ÿ≠ÿßŸÉŸÖ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•üëë' },
        { level: 11, role: 'ÿ≥ŸÅŸäÿ± ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ‚ö°üîÆ' },
        { level: 12, role: 'ŸÖÿ≠ÿßÿ±ÿ® ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿπÿ∏ŸäŸÖ ‚öîÔ∏è' },
        { level: 13, role: 'ŸÜÿßÿ¶ÿ® ÿ±ÿ¶Ÿäÿ≥ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üñ§‚ö°' },
        { level: 14, role: 'ÿßŸÑŸÖÿ±ÿ¥ÿØ ÿßŸÑÿ±Ÿàÿ≠Ÿä ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üåí' },
        { level: 15, role: 'ÿ¥Ÿäÿ∑ÿßŸÜ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üíÄüî•' },
        { level: 16, role: 'ÿ£ŸÖŸäÿ± ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üëëüñ§' },
        { level: 17, role: 'ÿßŸÑÿ∏ŸÑ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ≥ÿßŸÉŸÜ üåë' },
        { level: 18, role: 'ÿßŸÑŸäÿØ ÿßŸÑŸäŸÖŸÜŸâ ŸÑÿ≥ÿßÿ≥ŸÉŸä üëã' },
        { level: 19, role: 'ÿ≥ŸäÿØ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ŸàŸÑ üî•üñ§' },
        { level: 20, role: 'ÿ•ŸÑŸá ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•‚ö°' },
        { level: 21, role: 'ÿßŸÑŸÖŸÑŸÉ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üëëüî•' },
        { level: 22, role: 'ÿ≠ÿßŸÉŸÖ ÿßŸÑÿ¥ŸäŸÜŸàÿ®Ÿä ÿßŸÑÿÆÿßŸÑÿØ ü¶ã' },
        { level: 23, role: 'ÿßŸÑŸÇÿßÿ¶ÿØ ÿßŸÑÿ£ÿπŸÑŸâ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üí™' },
        { level: 24, role: 'ÿßŸÑÿ¥Ÿäÿ∑ÿßŸÜ ÿßŸÑÿπÿßÿ¶ÿØ ŸÖŸÜ ÿßŸÑÿ¨ÿ≠ŸäŸÖ üî•üíÄ' },
        { level: 25, role: 'ÿ≠ÿßŸÉŸÖ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ÿÆŸäÿ± üñ§üëë' },
        { level: 26, role: 'ÿßŸÑÿ£ÿ≥ÿ∑Ÿàÿ±ÿ© ÿßŸÑÿ≠Ÿäÿ© ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üåü' },
        { level: 27, role: 'ÿßŸÑŸÖŸÇÿßÿ™ŸÑ ÿßŸÑŸÖÿ¨ŸÜÿ≠ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ü¶ãüí•' },
        { level: 28, role: 'ÿßŸÑŸÖÿ≠ŸÇŸÇ ÿßŸÑÿπÿ∏ŸäŸÖ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üîéüñ§' },
        { level: 29, role: 'ÿßŸÑÿ∏ŸÑ ÿßŸÑŸÇŸàŸä ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üåëüî•' },
        { level: 30, role: 'ÿßŸÑÿ¥ÿ®ÿ≠ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑŸÇŸàŸä üëªüí™' },
        { level: 31, role: 'ÿßŸÑÿØŸÖ ÿßŸÑÿ£ÿ≠ŸÖÿ± ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî¥üí•' },
        { level: 32, role: 'ÿ≠ÿßŸÖŸÑ ÿ≥Ÿàÿ≥ÿßŸÜŸà ÿßŸÑÿ¨ÿØŸäÿØ ü¶ã‚ö°' },
        { level: 33, role: 'ÿµÿßÿ¶ÿØ ÿßŸÑÿ£ÿ±Ÿàÿßÿ≠ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üëπüî•' },
        { level: 34, role: 'ŸÇÿßŸáÿ± ÿßŸÑÿ£ÿπÿØÿßÿ° ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üñ§‚öîÔ∏è' },
        { level: 35, role: 'ÿßŸÑŸäÿØ ÿßŸÑÿ®ÿßÿ∑ÿ¥ÿ© ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ‚úãüíÄ' },
        { level: 36, role: 'ŸÖŸÑŸÉ ÿßŸÑÿ∏ŸÑÿßŸÑ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üåëüëë' },
        { level: 37, role: 'ÿ≠ÿßŸÉŸÖ ÿßŸÑŸÇŸàÿ© ÿßŸÑÿπÿ∏ŸÖŸâ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üí™üî•' },
        { level: 38, role: 'ÿ≥ŸäÿØ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ÿ≥ÿ∑Ÿàÿ±Ÿä ‚ö°üñ§' },
        { level: 39, role: 'ÿ≤ÿπŸäŸÖ ÿßŸÑÿ¥ŸäŸÜŸàÿ®Ÿä ÿßŸÑÿÆÿßŸÑÿØ ü¶ãüëë' },
        { level: 40, role: 'ÿßŸÑÿπÿØŸà ÿßŸÑŸÜŸáÿßÿ¶Ÿä ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üñ§üî•' },
        { level: 41, role: ' ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ÿ≥ŸÖŸâ üåå‚ö°' },
        { level: 42, role: 'ÿ≠ÿßŸÉŸÖ ÿßŸÑŸÇŸàÿ© ÿßŸÑÿπÿ∏ŸÖŸâ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üí™üî•' },
        { level: 43, role: 'ÿ≠ÿßŸÉŸÖ ÿπÿßŸÑŸÖ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•üåé' },
        { level: 44, role: 'ÿßŸÑŸÖŸÑŸàŸÉ ÿßŸÑŸÖÿ∏ŸÑŸÖŸäŸÜ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üñ§üëë' },
        { level: 45, role: 'ÿßŸÑŸÇÿ™ÿßŸÑ ÿßŸÑÿ£ÿÆŸäÿ± ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üíÄüî•' },
        { level: 46, role: 'ÿßŸÑÿ™ŸÜŸäŸÜ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ÿ≤ÿ±ŸÇ üêâ‚ö°' },
        { level: 47, role: 'ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿπÿ∏ŸäŸÖ ÿßŸÑÿ∞Ÿä ŸÑÿß ŸäŸÇŸáÿ± üî•üñ§' },
        { level: 48, role: 'ŸÖŸÑŸÉ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ≥ÿßŸÉŸÜ üåëüëë' },
        { level: 49, role: 'ÿßŸÑŸÖŸÇÿßÿ™ŸÑ ÿßŸÑŸÜÿßÿ±Ÿä ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•üí•' },
        { level: 50, role: 'ÿ≥ŸäÿØ ÿßŸÑŸÅŸàÿ∂Ÿâ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üå™Ô∏èüî•' },
        { level: 51, role: 'ÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿ≥ÿßÿ≥ŸÉŸä ÿßŸÑŸÖÿ≤ÿπÿ¨ üñ§üî•' },
        { level: 52, role: 'ÿßŸÑŸàÿ±Ÿäÿ´ ÿßŸÑÿπÿ∏ŸäŸÖ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•‚ö°' },
        { level: 53, role: 'ÿßŸÑÿ∏ŸÑ ÿßŸÑŸÖÿ∏ŸÑŸÖ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üåëüíÄ' },
        { level: 54, role: 'ÿ≤ÿπŸäŸÖ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ŸÇŸàŸâ üñ§üî•' },
        { level: 55, role: 'ŸÖŸÑŸÉ ÿßŸÑÿ∏ŸÑÿßŸÖ ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üñ§üëë' },
        { level: 56, role: 'ÿßŸÑÿ¥Ÿäÿ∑ÿßŸÜ ÿßŸÑÿÆÿßŸÑÿØ ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üíÄüî•' },
        { level: 57, role: 'ÿ≥Ÿàÿ≥ÿßŸÜŸà ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ∞Ÿä ŸÑÿß ŸäŸÇŸáÿ± ‚ö°ü¶ã' },
        { level: 58, role: 'ÿßŸÑÿ£ÿ≥ÿ∑Ÿàÿ±ÿ© ÿßŸÑÿ≠Ÿäÿ© ŸÑŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üñ§üåå' },
        { level: 59, role: 'ÿ¥Ÿäÿ∑ÿßŸÜ ÿßŸÑŸÜÿßÿ± ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß üî•üíÄ' },
        { level: 60, role: 'üî±ÿßŸÑÿ£Ÿàÿ™ÿ¥ŸäŸáÿß ÿßŸÑÿ£ÿπÿ∏ŸÖ‚ö°üñ§' }
    ]
    let role = roles.find(r => level <= r.level)?.role || 'ÿßŸÑÿ≤ÿπŸäŸÖ ÿßŸÑŸÖÿ∑ŸÑŸÇ ŸÑŸÑÿπÿµÿßÿ®ÿßÿ™üëë'

    let { min, xp, max } = xpRange(user.level, global.multiplier)
        let currentExp = user.exp - min
        let expNeeded = xp

    let ini_txt = `‚ïÆ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚ï≠ŸÄ\nÀºü§¥üèºÀπ‚îÜ ÿßŸÑŸÄÿßÿ≥ŸÄŸÖ‚îÜ‚Üµ ‚åü${user.name}‚åú\nÀºüîÆÀπ‚îÜÿßŸÑŸÄŸÖŸÄÿ≥ŸÄÿ™ŸÄŸàŸä‚îÜ‚Üµ ‚åü${user.level}‚åú\nÀºüéñÔ∏èÀπ‚îÜÿ±ÿ™ŸÄÿ®ŸÄŸÄÿ™ŸÄŸÉ‚îÜ‚Üµ ‚åü${role}‚åú\nÀºüöÄÀπ‚îÜÿ±ÿµŸÄŸÄŸäŸÄÿØŸÉ‚îÜ‚Üµ ‚åü${user.exp }‚åú\n‚ïØ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚ï∞ŸÄ\n> ÀºüìØÀπ ŸÖŸÄŸÄŸÑŸÄÿßÿ≠ŸÄŸÄŸÄÿ∏ŸÄŸÄŸÄÿ© ‚áÖ ‚Ü∂\n‚ïÆ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚ï≠ŸÄ\n>  *‚Äî‚óâ ŸÉŸÑŸÖÿß ŸÑÿπÿ®ÿ™  Ÿàÿ™ŸÅÿßÿπŸÑÿ™  ŸÖÿπ  ÿßŸÑÿ®Ÿàÿ™  Ÿäÿ≤ÿØÿßÿØ  ŸÖÿ≥ÿ™ŸàÿßŸÉ‚ö°. ÿßÿ≥ÿ™ŸÖÿ±  ŸÅŸä  ÿßŸÑÿ™ŸÅÿßÿπŸÑ  ŸÖÿπ  ÿßŸÑÿ®Ÿàÿ™ üéÉ!* \n> _ŸÜŸÄÿßŸÇŸÄÿµŸÄŸÉ   *${xp - (user.exp - min)}* XP   ÿπŸÄÿ¥ŸÄÿßŸÜ   ÿ™ŸÄÿ™ŸÄÿ±ŸÇŸÄŸâ\n_‚ïØ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÜ ‚ï∞ŸÄ\n> ¬©  ôy ·¥õ·¥Ä…¥·¥ä…™ Ä·¥è-·¥Ä…™ ¬≤‚Å∞¬≤‚Åµ
`
    let nama = await conn.getName(m.sender)

    try {
        let pp = await conn.profilePictureUrl(m.sender, 'image').catch(() => 'https://i.ibb.co/m53WF9N/avatar-contact.png')
        let backgroundUrl = `https://files.catbox.moe/cakuly.jpg`

        let [bg, avatar] = await Promise.all([
            loadImage(backgroundUrl),
            loadImage(pp)
        ])

        const canvas = createCanvas(900, 420)
        const ctx = canvas.getContext('2d')

        ctx.drawImage(bg, 0, 0, canvas.width, canvas.height)

        const overlayX = 30, overlayY = 60, overlayWidth = 840, overlayHeight = 300, overlayRadius = 30
        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'
        ctx.beginPath()
        ctx.moveTo(overlayX + overlayRadius, overlayY)
        ctx.lineTo(overlayX + overlayWidth - overlayRadius, overlayY)
        ctx.quadraticCurveTo(overlayX + overlayWidth, overlayY, overlayX + overlayWidth, overlayY + overlayRadius)
        ctx.lineTo(overlayX + overlayWidth, overlayY + overlayHeight - overlayRadius)
        ctx.quadraticCurveTo(overlayX + overlayWidth, overlayY + overlayHeight, overlayX + overlayWidth - overlayRadius, overlayY + overlayHeight)
        ctx.lineTo(overlayX + overlayRadius, overlayY + overlayHeight)
        ctx.quadraticCurveTo(overlayX, overlayY + overlayHeight, overlayX, overlayY + overlayHeight - overlayRadius)
        ctx.lineTo(overlayX, overlayY + overlayRadius)
        ctx.quadraticCurveTo(overlayX, overlayY, overlayX + overlayRadius, overlayY)
        ctx.closePath()
        ctx.fill()

        const avatarSize = 180
        const avatarX = 80, avatarY = 120
        ctx.save()
        ctx.beginPath()
        ctx.arc(avatarX + avatarSize / 2, avatarY + avatarSize / 2, avatarSize / 2, 0, Math.PI * 2, true)
        ctx.closePath()
        ctx.clip()
        ctx.drawImage(avatar, avatarX, avatarY, avatarSize, avatarSize)
        ctx.restore()

        ctx.strokeStyle = '#8B0000'
        ctx.lineWidth = 6
        ctx.beginPath()
        ctx.arc(avatarX + avatarSize / 2, avatarY + avatarSize / 2, avatarSize / 2 + 3, 0, Math.PI * 2, true)
        ctx.stroke()

        ctx.fillStyle = '#E0E0E0'
        ctx.font = 'bold 24px Arial'
        ctx.textAlign = 'left'

        const textX = avatarX + avatarSize + 35, textY = avatarY + 60

            // ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÄ EXP ÿßŸÑŸÑÿßÿ≤ŸÖ ŸÑŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ™ÿßŸÑŸä
        
        let { min, xp, max } = xpRange(user.level, global.multiplier)
        let currentExp = user.exp - min
        let expNeeded = xp

        ctx.fillText(`${nama}`, textX, textY)
        ctx.fillText(`LVL ${user.level}`, textX, textY + 35)
        ctx.fillText(`EXP: ${user.exp}`, textX, textY + 70)

        const barX = textX, barY = textY + 100, barWidth = 500, barHeight = 28
        const progress = (user.exp - min) / xp

        ctx.fillStyle = '#333'
        ctx.beginPath()
        ctx.roundRect(barX, barY, barWidth, barHeight, 14)
        ctx.fill()

        const gradient = ctx.createLinearGradient(barX, barY, barX + barWidth, barY)
        gradient.addColorStop(0, '#8B0000')
        gradient.addColorStop(1, '#1E90FF')

        ctx.fillStyle = gradient
        ctx.beginPath()
        ctx.roundRect(barX, barY, barWidth * progress, barHeight, 14)
        ctx.fill()

        ctx.strokeStyle = '#D8BFD8'
        ctx.lineWidth = 2
        ctx.stroke()

        ctx.fillStyle = '#FFFFFF'
        ctx.font = 'bold 20px Arial'
        ctx.textAlign = 'center'
        ctx.fillText(`${Math.floor(progress * 100)}%`, barX + barWidth / 2, barY + barHeight / 2 + 5)

        await conn.sendMessage(m.chat, { image: canvas.toBuffer(), caption: ini_txt }, { quoted: m })
    } catch (err) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿµŸàÿ±ÿ©:", err.message, err.stack)
        await m.reply(ini_txt)
    }
}

handler.command = ['ŸÖÿ≥ÿ™ŸàŸä', 'ŸÖÿ≥ÿ™ŸàŸâ_ÿ£ÿπŸÑŸâ', 'ŸÖÿ≥ÿ™ŸàÿßŸäÿß', 'ŸÑŸÅŸÑ', 'ÿ±ÿßŸÜŸÉ', 'ŸÖÿ≥ÿ™ŸàÿßŸá', 'lvl', 'level']

export default handler